// <auto-generated />
using System;
using DataAccessLayer.context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241021211834_createidentity")]
    partial class createidentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FristName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Daily_Rent")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("LibrarianID_FK")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("LibrarianID_FK");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 5,
                            Author = "Amir Amr",
                            Daily_Rent = 5m,
                            Genre = "Romance",
                            Image = "1.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "جبارة العشق"
                        },
                        new
                        {
                            ID = 2,
                            Amount = 4,
                            Author = "Jeen Osten",
                            Daily_Rent = 5m,
                            Genre = "Romance",
                            Image = "2.jpeg",
                            LibrarianID_FK = 2,
                            Status = "Available",
                            Title = "كبرياء وهوا"
                        },
                        new
                        {
                            ID = 3,
                            Amount = 3,
                            Author = "Mona Elmarshood",
                            Daily_Rent = 5m,
                            Genre = "Romance",
                            Image = "3.jpeg",
                            LibrarianID_FK = 3,
                            Status = "Available",
                            Title = "أنت لي"
                        },
                        new
                        {
                            ID = 4,
                            Amount = 2,
                            Author = "Mwafaq Elsnoosy",
                            Daily_Rent = 5m,
                            Genre = "Romance",
                            Image = "4.jpeg",
                            LibrarianID_FK = 4,
                            Status = "Available",
                            Title = "أحببتك أنت"
                        },
                        new
                        {
                            ID = 5,
                            Amount = 4,
                            Author = "Khawla Hamdy",
                            Daily_Rent = 5m,
                            Genre = "Romance",
                            Image = "5.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "في قلبي أنثى عبرية"
                        },
                        new
                        {
                            ID = 6,
                            Amount = 3,
                            Author = "Galal Amin",
                            Daily_Rent = 5m,
                            Genre = "Biography",
                            Image = "6.jpeg",
                            LibrarianID_FK = 4,
                            Status = "Available",
                            Title = "ماذا علمتني الحياه"
                        },
                        new
                        {
                            ID = 7,
                            Amount = 1,
                            Author = "Mostafa Zahran",
                            Daily_Rent = 5m,
                            Genre = "Biography",
                            Image = "7.jpeg",
                            LibrarianID_FK = 3,
                            Status = "Available",
                            Title = "بطولات من التاريخ"
                        },
                        new
                        {
                            ID = 8,
                            Amount = 5,
                            Author = "Abdalla Saleh",
                            Daily_Rent = 5m,
                            Genre = "Biography",
                            Image = "8.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "عظماء بلا مدارس"
                        },
                        new
                        {
                            ID = 9,
                            Amount = 4,
                            Author = "Tarek Elbashry",
                            Daily_Rent = 5m,
                            Genre = "Biography",
                            Image = "9.jpeg",
                            LibrarianID_FK = 3,
                            Status = "Available",
                            Title = "شخصيات تاريخية"
                        },
                        new
                        {
                            ID = 10,
                            Amount = 3,
                            Author = "Ibrahim Ahmed",
                            Daily_Rent = 5m,
                            Genre = "Biography",
                            Image = "10.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "بنوالأزرق"
                        },
                        new
                        {
                            ID = 11,
                            Amount = 5,
                            Author = "Peter Swanson",
                            Daily_Rent = 5m,
                            Genre = "Crime",
                            Image = "11.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "ثماني جرائم كاملة"
                        },
                        new
                        {
                            ID = 12,
                            Amount = 4,
                            Author = "’Mahmoud Wahba",
                            Daily_Rent = 5m,
                            Genre = "Crime",
                            Image = "12.jpeg",
                            LibrarianID_FK = 3,
                            Status = "Available",
                            Title = "جريمة في بيت المتولي"
                        },
                        new
                        {
                            ID = 13,
                            Amount = 3,
                            Author = "Noran Khaled",
                            Daily_Rent = 5m,
                            Genre = "Crime",
                            Image = "13.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "طرد يصل متأخرا"
                        },
                        new
                        {
                            ID = 14,
                            Amount = 2,
                            Author = "Khaled Amin",
                            Daily_Rent = 5m,
                            Genre = "Crime",
                            Image = "14.jpeg",
                            LibrarianID_FK = 2,
                            Status = "Available",
                            Title = "جرائم الغراب السبع"
                        },
                        new
                        {
                            ID = 15,
                            Amount = 4,
                            Author = "Noha Dawood",
                            Daily_Rent = 5m,
                            Genre = "Crime",
                            Image = "15.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "جريمة السيدةهاء"
                        },
                        new
                        {
                            ID = 16,
                            Amount = 3,
                            Author = "Carl Sagan",
                            Daily_Rent = 5m,
                            Genre = "Since Fiction",
                            Image = "16.jpeg",
                            LibrarianID_FK = 4,
                            Status = "Available",
                            Title = "اتصال"
                        },
                        new
                        {
                            ID = 17,
                            Amount = 1,
                            Author = "Arthar Conan Duel",
                            Daily_Rent = 5m,
                            Genre = "Since Fiction",
                            Image = "17.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "The Lost World"
                        },
                        new
                        {
                            ID = 18,
                            Amount = 5,
                            Author = "Harbert Gorge",
                            Daily_Rent = 5m,
                            Genre = "Since Fiction",
                            Image = "18.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "The War Of The Worlds"
                        },
                        new
                        {
                            ID = 19,
                            Amount = 4,
                            Author = "Ahmed Al Hemdan",
                            Daily_Rent = 5m,
                            Genre = "Since Fiction",
                            Image = "19.jpeg",
                            LibrarianID_FK = 3,
                            Status = "Available",
                            Title = "آرسس"
                        },
                        new
                        {
                            ID = 20,
                            Amount = 3,
                            Author = "Amar Yaser",
                            Daily_Rent = 5m,
                            Genre = "Since Fiction",
                            Image = "20.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "أرض قيمورا"
                        },
                        new
                        {
                            ID = 21,
                            Amount = 5,
                            Author = "Susan Hill",
                            Daily_Rent = 5m,
                            Genre = "Horror",
                            Image = "21.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "The Small Hand"
                        },
                        new
                        {
                            ID = 22,
                            Amount = 4,
                            Author = "Khaled Amin",
                            Daily_Rent = 5m,
                            Genre = "Horror",
                            Image = "22.jpeg",
                            LibrarianID_FK = 3,
                            Status = "Available",
                            Title = "انهم يأتون ليلا"
                        },
                        new
                        {
                            ID = 23,
                            Amount = 3,
                            Author = "Ayman Ayady",
                            Daily_Rent = 5m,
                            Genre = "Horror",
                            Image = "23.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "النكرومانسيرا"
                        },
                        new
                        {
                            ID = 24,
                            Amount = 2,
                            Author = "Amr Elmnofy",
                            Daily_Rent = 5m,
                            Genre = "Horror",
                            Image = "24.jpeg",
                            LibrarianID_FK = 2,
                            Status = "Available",
                            Title = "بئر برهوت"
                        },
                        new
                        {
                            ID = 25,
                            Amount = 4,
                            Author = "Khaled Amin",
                            Daily_Rent = 5m,
                            Genre = "Horror",
                            Image = "25.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "زائر منتصف الليل"
                        },
                        new
                        {
                            ID = 26,
                            Amount = 3,
                            Author = "Radwa Ashour",
                            Daily_Rent = 5m,
                            Genre = "History",
                            Image = "26.jpeg",
                            LibrarianID_FK = 4,
                            Status = "Available",
                            Title = "ثلاثية غرناطة"
                        },
                        new
                        {
                            ID = 27,
                            Amount = 1,
                            Author = "Reem Basiony",
                            Daily_Rent = 5m,
                            Genre = "History",
                            Image = "27.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "أولاد الناس"
                        },
                        new
                        {
                            ID = 28,
                            Amount = 5,
                            Author = "Amir Arslan",
                            Daily_Rent = 5m,
                            Genre = "History",
                            Image = "28.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "أسرار القصور"
                        },
                        new
                        {
                            ID = 29,
                            Amount = 4,
                            Author = "Mahmoud Taher",
                            Daily_Rent = 5m,
                            Genre = "History",
                            Image = "29.jpeg",
                            LibrarianID_FK = 3,
                            Status = "Available",
                            Title = "وداعا طليطلة"
                        },
                        new
                        {
                            ID = 30,
                            Amount = 3,
                            Author = "Amr Afifi",
                            Daily_Rent = 5m,
                            Genre = "History",
                            Image = "30.jpeg",
                            LibrarianID_FK = 1,
                            Status = "Available",
                            Title = "فاندلاسيا"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookTransaction", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("BookID", "TransactionID");

                    b.HasIndex("TransactionID");

                    b.ToTable("BookTransactions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Librarian", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Librarians");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "Essamfw@gmail.com",
                            First_Name = "Essam",
                            Last_Name = "Fawzy",
                            Phone = "01015044706"
                        },
                        new
                        {
                            ID = 2,
                            Email = "Amr@gmail.com",
                            First_Name = "Amr",
                            Last_Name = "ElMawrdy",
                            Phone = "0102 120 2971"
                        },
                        new
                        {
                            ID = 3,
                            Email = "MohammedAli@gmail.com",
                            First_Name = "Mohammed",
                            Last_Name = "Ali",
                            Phone = "01011224706"
                        },
                        new
                        {
                            ID = 4,
                            Email = "Adel@gmail.com",
                            First_Name = "Adel",
                            Last_Name = "Ahmed",
                            Phone = "01011228888"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Penalty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Daily_Penalty")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("OverDueDateDays")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID_FK")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ID");

                    b.HasIndex("TransactionID_FK");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CheckOut_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Due_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibrarianID_FK")
                        .HasColumnType("int");

                    b.Property<int>("MemberID_FK")
                        .HasColumnType("int");

                    b.Property<int>("OverDueDate_Days")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Return_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total_Cost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ID");

                    b.HasIndex("LibrarianID_FK");

                    b.HasIndex("MemberID_FK");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Librarian", "Librarian")
                        .WithMany()
                        .HasForeignKey("LibrarianID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Librarian");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BookTransaction", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Penalty", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Transaction", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Librarian", "Librarian")
                        .WithMany()
                        .HasForeignKey("LibrarianID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Librarian");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
